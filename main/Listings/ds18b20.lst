C51 COMPILER V9.54   DS18B20                                                               05/10/2019 14:59:31 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\ds18b20.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\ds18b20\ds18b20.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\delay;..\ds
                    -18b20;..\lcd12864;..\ds1302) DEBUG PRINT(.\Listings\ds18b20.lst) OBJECT(.\Objects\ds18b20.obj)

line level    source

   1          #include <reg52.h>
   2          #include "ds18b20.h"
   3          #include "delay.h"
   4          
   5          uint i,j,temp;
   6          uchar high,low;
   7          float f_temp;
   8          char a,d2,d1,d0; 
   9          
  10          sbit DQ=P2^2;       //定义DS18B20数据线引脚端
  11          
  12          
  13          //-----------------------获温部分：初始化函数--------------------
  14          void Temp_init()
  15          {
  16   1              DQ=0;  //拉低总线，产生复位信号
  17   1              i=80;
  18   1              while(i>0)
  19   1                      i--;  //延时480~960us
  20   1              DQ=1;  //拉高总线
  21   1              i=4;
  22   1              while(i>0)
  23   1                      i--;  //延时15~60us
  24   1              while(DQ);  //等待产生应答脉冲
  25   1              i=70;
  26   1              while(i>0)
  27   1                      i--;  //延时至少480us
  28   1      }
  29          //------------------获温部分：写函数-------------------------------
  30          void DS18B20_Write_Byte(uchar dat)  //写1个字节
  31          {
  32   1      bit testb;
  33   1      for(j=8;j>0;j--)
  34   1      {
  35   2              testb=dat&0x01;
  36   2              dat=dat>>1;
  37   2        if(testb)  //写1
  38   2        {
  39   3                 DQ=0;  //拉低总线，产生写时间隙
  40   3                 i++;  //延时大于1us
  41   3                 DQ=1;  //拉高总线
  42   3                 i=8;while(i>0)i--;  //延时至少60us，供DS18B20采样
  43   3        }
  44   2        else    //写0
  45   2        {
  46   3                 DQ=0;  //拉低总线，产生写时间隙
  47   3                 i=8;while(i>0)i--;  //保持至少60us，供DS18B20采样
  48   3                 DQ=1;  //拉高总线
  49   3                 i++;i++;
  50   3        }
  51   2      } 
  52   1      }
  53          //------------------获温部分：读函数-------------------------------
  54          uchar DS18B20_Read_Byte()  //读1个字节
C51 COMPILER V9.54   DS18B20                                                               05/10/2019 14:59:31 PAGE 2   

  55          {
  56   1      bit b;  //定义存放接收到的1个字节
  57   1      uchar i_b;
  58   1      uchar rdbyte;
  59   1      for(j=8;j>0;j--)
  60   1      {
  61   2                DQ=0;  //拉低总线，产生读时隙
  62   2                i++;  //延时大于1us
  63   2                DQ=1;  //释放总线
  64   2                i++;i++;  //给一定时间让总线释放
  65   2                b=DQ;  //读取数据
  66   2                i=8;
  67   2              while(i>0)
  68   2                      i--;  //延时至少60us
  69   2        i_b=b;
  70   2        rdbyte=(i_b<<7)|(rdbyte>>1);  //将读取到得一位值左移7位，存放读取的数据变量rdbyte右移1位
  71   2      }
  72   1      return rdbyte;
  73   1      }
  74          //----------------------温度获取函数---------------------------
  75          void Temp_get()
  76          { 
  77   1              Temp_init();  //初始化，复位并获取应答信号
  78   1              DS18B20_Write_Byte(0xcc);  //跳过ROM
  79   1              DS18B20_Write_Byte(0x44);  //开始温度转换
  80   1              delay_ms(1000);  //等待温度转换完成
  81   1              Temp_init();  //将DS18B20复位
  82   1              DS18B20_Write_Byte(0xcc);  //跳过ROM
  83   1              DS18B20_Write_Byte(0xbe);  //读暂存器
  84   1              low=DS18B20_Read_Byte();  //读取低8位
  85   1              high=DS18B20_Read_Byte();  //读取高8位
  86   1              temp=high;
  87   1              temp<<=8;
  88   1              temp=temp|low;  //将读取的低8位和高8位合并
  89   1              f_temp=temp*0.0625;  //温度在寄存器中为12位 分辨率位0.0625°
  90   1              temp=f_temp*10+0.5;  //精确到十分位，四舍五入
  91   1              d2=temp/100;  //显示数据：十位
  92   1              d1=temp%100/10;  //显示数据：个位
  93   1              d0=temp%10;  //显示数据：十分位
  94   1      
  95   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    432    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
